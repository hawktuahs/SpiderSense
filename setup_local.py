#!/usr/bin/env python3
"""
SmartSense Local Setup Script
Automates the local development environment setup
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(cmd, cwd=None, check=True):
    """Run shell command with error handling"""
    print(f"Running: {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, cwd=cwd, check=check, 
                              capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        if e.stderr:
            print(f"Error output: {e.stderr}")
        return False

def check_requirements():
    """Check if Python and Node.js are installed"""
    print("🔍 Checking requirements...")
    
    # Check Python
    try:
        python_version = subprocess.check_output([sys.executable, "--version"], text=True)
        print(f"✅ {python_version.strip()}")
    except:
        print("❌ Python not found")
        return False
    
    # Check Node.js
    try:
        node_version = subprocess.check_output(["node", "--version"], text=True)
        print(f"✅ Node.js {node_version.strip()}")
    except:
        print("❌ Node.js not found. Please install Node.js 18+ from https://nodejs.org/")
        return False
    
    # Check npm
    try:
        npm_version = subprocess.check_output(["npm", "--version"], text=True)
        print(f"✅ npm {npm_version.strip()}")
    except:
        print("❌ npm not found")
        return False
    
    return True

def setup_python_env():
    """Setup Python environment and dependencies"""
    print("\n🐍 Setting up Python environment...")
    
    # Install Python dependencies
    if not run_command("pip install -r requirements.txt"):
        print("❌ Failed to install Python dependencies")
        return False
    
    print("✅ Python dependencies installed")
    return True

def setup_node_env():
    """Setup Node.js environment and dependencies"""
    print("\n📦 Setting up Node.js environment...")
    
    web_dir = Path("apps/web")
    if not web_dir.exists():
        print(f"❌ Web directory not found: {web_dir}")
        return False
    
    # Install Node.js dependencies
    if not run_command("npm install", cwd=web_dir):
        print("❌ Failed to install Node.js dependencies")
        return False
    
    print("✅ Node.js dependencies installed")
    return True

def setup_env_file():
    """Setup environment file"""
    print("\n⚙️ Setting up environment configuration...")
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    if not env_file.exists() and env_example.exists():
        shutil.copy(env_example, env_file)
        print("✅ Created .env file from .env.example")
        print("💡 Edit .env file to add your OpenWeatherMap API key (optional)")
    elif env_file.exists():
        print("✅ .env file already exists")
    else:
        print("⚠️ No .env.example found, creating basic .env")
        with open(env_file, "w") as f:
            f.write("PYTHONPATH=.\n")
            f.write("TIMEZONE=Asia/Kolkata\n")
            f.write("NEXT_PUBLIC_API_URL=http://localhost:8000\n")
    
    return True

def create_demo_data():
    """Ensure demo data exists"""
    print("\n📊 Checking demo data...")
    
    demo_file = Path("examples/demo_single_meter.csv")
    if demo_file.exists():
        print("✅ Demo data found")
        return True
    
    print("⚠️ Demo data not found, but will be generated by API on first run")
    return True

def test_setup():
    """Test the setup by running health checks"""
    print("\n🧪 Testing setup...")
    
    # Test Python imports
    try:
        import pandas
        import numpy
        import fastapi
        print("✅ Core Python packages imported successfully")
    except ImportError as e:
        print(f"❌ Import error: {e}")
        return False
    
    return True

def print_next_steps():
    """Print instructions for running the application"""
    print("\n🚀 Setup complete! Next steps:")
    print("\n1. Start the API server (Terminal 1):")
    print("   cd apps/api")
    print("   python -m uvicorn main:app --reload --port 8000")
    print("\n2. Start the web UI (Terminal 2):")
    print("   cd apps/web")
    print("   npm run dev")
    print("\n3. Open your browser:")
    print("   http://localhost:3000")
    print("\n4. Test the API:")
    print("   http://localhost:8000/health")
    print("   http://localhost:8000/docs (API documentation)")
    print("\n💡 Optional: Add OpenWeatherMap API key to .env for live weather data")
    print("   Get free key from: https://openweathermap.org/api")

def main():
    """Main setup function"""
    print("🌟 SmartSense Local Setup")
    print("=" * 50)
    
    # Change to project directory
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    
    # Check requirements
    if not check_requirements():
        print("\n❌ Requirements check failed")
        sys.exit(1)
    
    # Setup environments
    success = True
    success &= setup_python_env()
    success &= setup_node_env()
    success &= setup_env_file()
    success &= create_demo_data()
    success &= test_setup()
    
    if success:
        print("\n✅ Setup completed successfully!")
        print_next_steps()
    else:
        print("\n❌ Setup failed. Please check the errors above.")
        sys.exit(1)

if __name__ == "__main__":
    main()
